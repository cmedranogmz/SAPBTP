managed;
//implementation in class zbp_r_travel_5712 unique; //Clase unica
//strict ( 2 );

define behavior for zr_travel_5712 alias Travel
implementation in class zbp_travel_5712 unique
persistent table ztb_travel_5712
with additional save
lock master //Bloquear la instancia raiz
authorization master ( instance )
etag master LastChangedAt
{
  field ( readonly ) LastChangedAt, LastChangedBy, CreatedAt, CreatedBy;  //Administrative fields: read only
  field ( mandatory : create ) TravelId, AgencyId, OverallStatus, BookingFee, CurrencyCode; //Mandatory fields that are required to create a Travel
  field ( features : instance ) TravelId, OverallStatus; //Dynamic field control
  //field (numbering : managed) TravelId; // El framework se encarga de asignar el valor con el tipo de dato: ABP_BEHV_PID

  create;
  update;
  delete;

  //Validations
  validation validateCustomer on save { create; field CustomerId; }
  validation validateDates on save { create; field BeginDate, EndDate; }
  validation validateStatus on save { create; field OverallStatus; }

  //Actions of instance
  action ( features : instance ) acceptTravel result [1] $self;
  action ( features : instance ) rejectTravel result [1] $self;

  action createTravelByTemplate result [1] $self;
  //internal action createTravelByTemplate result[1] $self; //Action internal
  //action createTravelByTemplate external 'CreateTravelWithCopy' result[1] $self;

  association _Booking { create ( features : instance ); }

  //Mapping CDS field = Table Field
  //mapping for ztb_travel_5712 corresponding; // Mapeo por correspondencia de nombres de campos
  mapping for ztb_travel_5712
    {
      TravelId      = travel_id;
      AgencyId      = agency_id;
      CustomerId    = customer_id;
      BeginDate     = begin_date;
      EndDate       = end_date;
      BookingFee    = booking_fee;
      TotalPrice    = total_price;
      CurrencyCode  = currency_code;
      Description   = description;
      OverallStatus = overall_status;
      CreatedBy     = created_by;
      CreatedAt     = created_at;
      LastChangedBy = last_changed_by;
      LastChangedAt = last_changed_at;
    }
}

define behavior for ZR_BOOKING_5712 alias Booking
implementation in class zbp_booking_5712 unique
persistent table ztb_booking_5712
//lock dependent ( TravelId = TravelId ) //Bloqueo por relacion de campos
lock dependent by _Travel //Bloqueo por asosiacion
authorization dependent by _Travel
etag master LastChangedAt
{
  field ( readonly ) TravelId; //Static fields control
  field ( mandatory : create ) BookingId, CarrierId, ConnectionId, FlightDate, BookingStatus;

  update;
  delete;

  validation validateStatus on save { create; field BookingStatus; }

  association _Travel;
  association _BookingSupplement { create ( features : instance ); }

  //Determinations
  determination calculateTotalFlightPrice on modify { field FlightPrice, CurrencyCode; }
  determination calculateTotalSupplPrice on modify { field CurrencyCode; }

  mapping for ztb_booking_5712
    {
      TravelId      = travel_id;
      BookingId     = booking_id;
      BookingDate   = booking_date;
      CustomerId    = customer_id;
      CarrierId     = carrier_id;
      //CarrierName= _Carrier.Name;
      ConnectionId  = connection_id;
      FlightDate    = flight_date;
      FlightPrice   = flight_price;
      CurrencyCode  = currency_code;
      BookingStatus = booking_status;
      LastChangedAt = last_changed_at;
    }

}

define behavior for ZR_BOOKSUP_5712 alias Supplement
implementation in class zbp_booksup_5712 unique
//persistent table ztb_booksup_5712
with unmanaged save
//lock dependent ( TravelId = TravelId )
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
{
  field ( readonly ) TravelId, BookingId;
  field ( mandatory : create ) SupplementId, Price;

  update;
  delete;

  association _Travel;
  association _Booking;

  determination calculateTotalSupplPrice on modify { field Price, CurrencyCode; }

  mapping for ztb_booksup_5712
    {
      TravelId            = travel_id;
      BookingId           = booking_id;
      BookingSupplementId = booking_supplement_id;
      SupplementId        = supplement_id;
      Price               = price;
      CurrencyCode        = currency_code;
      LastChangedAt       = last_changed_at;
    }

}